#include<iostream>
#include<string.h>
using namespace std;
//彼得潘和温迪框架
//举例：
//.....		.....	..#..			..#...#...*..
//.....		.....	.#.#.			.#.#.#.#.*.*.
//..... ==>	..A..==>#.A.# //两个：	#.D.#.O.*.G.*
//.....     .....	.#.#.			.#.#.#.#.*.*.
//.....		.....	..#..			..#...#...*..
char a[6][62];
string s;
void frame(char letter,int y, int flag)//flag作为标志，表示是用彼得潘框架还是温迪框架,letter代表输入的大写英文字母，y代表的是修改为彼得潘框架或温迪框架的地方
{
	a[3][y] = letter;
	a[1][y] = a[2][y - 1] = a[2][y + 1] = a[3][y - 2] = a[3][y + 2] = a[4][y - 1] = a[4][y + 1] = a[5][y] = (flag ? '#' : '*');
}//这里我们不适用第0行和第0列
int main()
{
	//思路：先处理非3倍数的框架，再处理3的倍数的框架，然后覆盖
	//温迪框架必须覆盖在彼得潘框架上，所以我们先处理彼得潘框架，然后再处理温迪框架，因为温迪框架会覆盖到彼得潘框架上
	memset(a, '.', sizeof(a));//先初始化为'.'
	cin >> s;//输入大写的英文字母
	for (int i = 0; i < s.size(); i++)
	{
		if (i % 3 == 2)continue;//先处理非3的框架
		frame(s[i], 4 * i + 3, 1);//1表示使用彼得潘框架
	}
	for (int i = 2; i < s.size(); i+=3)//处理3的倍数，用温迪框架
	{
		frame(s[i], 4 * i + 3, 0);
	}
	for (int i = 1; i < 6; i++)//注意我们用frame函数框架时没有使用第0行和第0列，所以这里i和j都从1开始循环
	{
		for (int j = 1; j < 4 * s.size() + 2; j++)
		{
			cout << a[i][j];
		}
		cout << endl;//输出完一行换行
	}
	return 0;
}